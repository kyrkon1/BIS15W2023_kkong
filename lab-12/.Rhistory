library(shinyapp)
names(palmerpenguins)
library(tidyverse)
library(palmerpenguins)
names(palmerpenguins)
names(palmerpenguins)
names(palmerpenguins)
library(tidyverse)
library(palmerpenguins)
palmerpenguins <- palmerpenguins
library(tidyverse)
library("palmerpenguins")
names(palmerpenguins)
names(penguins)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_length_mm") #what the variable is, what the user sees, and then the 4 choices, and selected is where the option starts
ui <- fluidPage(
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_length_mm")
ui <- fluidPage(
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_length_mm")
server <- function(input, output) {
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_length_mm")
)
server <- function(input, output) {
}
shinyApp(ui, server)
names(penguins)
penguins %>%
ggplot(aes(x=bill_length_mm, y= flipper_length_mm))+
geom_point()
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm")
)
server <- function(input, output) {
output$plot <-renderPlot({
ggplot(data=penguins, aes_string(x=input$x, y= input$y, color = species))+
geom_point()+
theme_light(base_size=18)
})
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm")
)
server <- function(input, output) {
output$plot <-renderPlot({
ggplot(data=penguins, aes_string(x=input$x, y= input$y, color =
"species"))+
geom_point()+
theme_light(base_size=18)
})
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm")
)
server <- function(input, output) {
output$plot <-renderPlot({
ggplot(data=penguins, aes_string(x=input$x, y= input$y, color =
"species"))+
geom_point()
})
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm")
)
server <- function(input, output) {
output$plot <-renderPlot({
ggplot(data=penguins, aes_string(x=input$x, y= input$y))+
geom_point()
})
}
shinyApp(ui, server)
penguins %>%
ggplot(aes(x=bill_length_mm, y= flipper_length_mm))+
geom_point()
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output) {
output$plot <-renderPlot({
ggplot(data=penguins, aes_string(x=input$x, y= input$y))+
geom_point()
})
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
plotOutput("plot", width = "500px", height = "400px") # tell ui that the output is a plot
)
server <- function(input, output) {
output$plot <-renderPlot({
ggplot(data=penguins, aes_string(x=input$x, y= input$y))+
geom_point()
})
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
plotOutput("plot", width = "500px", height = "400px") # tell ui that the output is a plot
)
server <- function(input, output) {
output$plot <-renderPlot({
ggplot(data=penguins, aes_string(x=input$x, y= input$y, color = "species"))+
geom_point()
})
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
plotOutput("plot", width = "500px", height = "400px") # tell ui that the output is a plot
)
server <- function(input, output) {
output$plot <-renderPlot({
ggplot(data=penguins, aes_string(x=input$x, y= input$y, color = "species"))+
geom_point()+
theme_light()
})
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
plotOutput("plot", width = "500px", height = "400px") # tell ui that the output is a plot
)
server <- function(input, output) {
output$plot <-renderPlot({
ggplot(data=penguins, aes_string(x=input$x, y= input$y, color = "species"))+
geom_point()+
theme_light(base_size= 18)
})
}
shinyApp(ui, server)
homerange <- readr::read_csv("data/Tamburelloetal_HomeRangeDatabase.csv")
View(homerange)
homerange %>%
ggplot(aes(x=locomotion, fill = trophic.guild))+
geom_bar()
homerange %>%
ggplot(aes(x=locomotion, fill = trophic.guild))+
geom_bar(position = "dodge")
homerange %>%
ggplot(aes(x=locomotion, fill = thermoregulation))+
geom_bar(position = "dodge")
library(shiny)
ui <- fluidPage(
radioButtons( "x", "Select Fill Variable", choices = c("trophic.guild", "thermoregulation"), selected= "trophic.guild"),
plotOutput("plot", width ="500px", height = "400px")
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
radioButtons( "x", "Select Fill Variable", choices = c("trophic.guild", "thermoregulation"), selected= "trophic.guild"),
plotOutput("plot", width ="500px", height = "400px")
)
server <- function(input, output, session) {
output$plot<-renderPlot({
ggplot(data= homerange, aes_string(x="locomotion", fill= input$x))+
geom_bar(position="dodge")
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
radioButtons( "x", "Select Fill Variable", choices = c("trophic.guild", "thermoregulation"), selected= "trophic.guild"),
plotOutput("plot")
)
server <- function(input, output, session) {
output$plot<-renderPlot({
ggplot(data= homerange, aes_string(x="locomotion", fill= input$x))+
geom_bar(position="dodge")
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
radioButtons( "x", "Select Fill Variable", choices = c("trophic.guild", "thermoregulation"), selected= "trophic.guild"),
plotOutput("plot")
)
server <- function(input, output, session) {
output$plot<-renderPlot({
ggplot(data= homerange, aes_string(x="locomotion", fill= input$x))+
geom_bar(position="dodge", alpha =0.8)+
theme_dark()
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
radioButtons( "x", "Select Fill Variable", choices = c("trophic.guild", "thermoregulation"), selected= "trophic.guild"),
plotOutput("plot")
)
server <- function(input, output, session) {
output$plot<-renderPlot({
ggplot(data= homerange, aes_string(x="locomotion", fill= input$x))+
geom_bar(position="dodge", alpha =0.8)+
theme_dark()+
labs(x= NULL, y= NULL, fill = "Fill Variable")
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
radioButtons( "x", "Select Fill Variable", choices = c("trophic.guild", "thermoregulation"), selected= "trophic.guild"),
plotOutput("plot")
)
server <- function(input, output, session) {
output$plot<-renderPlot({
ggplot(data= homerange, aes_string(x="locomotion", fill= input$x))+
geom_bar(position="dodge", alpha =0.8)+
theme_light()+
labs(x= NULL, y= NULL, fill = "Fill Variable")
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
radioButtons( "x", "Select Fill Variable", choices = c("trophic.guild", "thermoregulation"), selected= "trophic.guild"),
plotOutput("plot")
)
server <- function(input, output, session) {
output$plot<-renderPlot({
ggplot(data= homerange, aes_string(x="locomotion", fill= input$x))+
geom_bar(position="dodge", alpha =0.8, color = black)+
theme_light()+
labs(x= NULL, y= NULL, fill = "Fill Variable")
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
radioButtons( "x", "Select Fill Variable", choices = c("trophic.guild", "thermoregulation"), selected= "trophic.guild"),
plotOutput("plot")
)
server <- function(input, output, session) {
output$plot<-renderPlot({
ggplot(data= homerange, aes_string(x="locomotion", fill= input$x))+
geom_bar(position="dodge", alpha =0.8, color = "black")+
theme_light()+
labs(x= NULL, y= NULL, fill = "Fill Variable")
})
}
shinyApp(ui, server)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(tidyverse)
library(shiny)
library(shinydashboard)
require(janitor)
library(palmerpenguins)
homerange <- readr::read_csv("data/Tamburelloetal_HomeRangeDatabase.csv")
runApp('homerange_app.R')
table(homerange$taxon)
table(homerange$taxon)
homerange %>%
ggplot(aes(x=log10.hra))+
geom_denisty()
homerange %>%
ggplot(aes(x=log10.hra))+
geom_density()
homerange %>%
ggplot(aes(x=log10.hra))+
geom_density( fill = "steelblue", color = "black", alpha =0.6)
homerange %>%
filter(taxon == "birds")
ggplot(aes(x=log10.hra))+
geom_density( fill = "steelblue", color = "black", alpha =0.6)
homerange %>%
filter(taxon == "birds") %>%
ggplot(aes(x=log10.hra))+
geom_density( fill = "steelblue", color = "black", alpha =0.6)
library(shiny)
ui <- fluidPage( titlePanel = "Log10.hra by Taxon",
radioButtons("x", "Select Taxon Variable", choices = c("birds", "lake fishes", "lizards", "mammals", "marine fishes", "river fishes", "snakes", "tortoises", "turtles"), selected = "birds"),
plotOutput("plot", width = "600px", height = "400px")
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage( titlePanel = "Log10.hra by Taxon",
selectInput("x", "Select Taxon", choices = c("birds", "lake fishes", "lizards", "mammals", "marine fishes", "river fishes", "snakes", "tortoises", "turtles"), selected = "birds"),
plotOutput("plot", width = "600px", height = "400px")
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage( titlePanel = "Log10.hra by Taxon",
selectInput("x", "Select Taxon", choices = c("birds", "lake fishes", "lizards", "mammals", "marine fishes", "river fishes", "snakes", "tortoises", "turtles"), selected = "birds"), # drop down menu for select input
plotOutput("plot", width = "600px", height = "400px")
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage( titlePanel = "Log10.hra by Taxon",
selectInput("x", "Select Taxon", choices = c("birds", "lake fishes", "lizards", "mammals", "marine fishes", "river fishes", "snakes", "tortoises", "turtles"), selected = "birds"), # drop down menu for select input
plotOutput("plot", width = "600px", height = "400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot( {
homerange %>%
filter(taxon == input$x) %>%
ggplot(aes(x= log10.hra))+
geom_density()
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(titlePanel = "Log10.hra by Taxon",
selectInput("x", "Select Taxon", choices = c("birds", "lake fishes", "lizards", "mammals", "marine fishes", "river fishes", "snakes", "tortoises", "turtles"), selected = "birds"), # drop down menu for select input
plotOutput("plot", width = "600px", height = "400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot( {
homerange %>%
filter(taxon == input$x) %>%
ggplot(aes(x= log10.hra))+
geom_density()
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(titlePanel("Log10.hra by Taxon"),
selectInput("x", "Select Taxon", choices = c("birds", "lake fishes", "lizards", "mammals", "marine fishes", "river fishes", "snakes", "tortoises", "turtles"), selected = "birds"), # drop down menu for select input
plotOutput("plot", width = "600px", height = "400px")
)
server <- function(input, output, session) {
output$plot <- renderPlot( {
homerange %>%
filter(taxon == input$x) %>%
ggplot(aes(x= log10.hra))+
geom_density(fill = "steelblue", color = "black", alpha =0.6)
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Log 10 Homerange by Taxon"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("taxon", " Select Taxon of Interest:", choices=unique(homerange$taxon)), hr(),
helpText("Reference: Tamburello N, Cote IM, Dulvy NK (2015) Energy and the scaling of animal space use. The American Naturalist 186(2):196-211.")),
# create a spot for the barplot
mainPanel(
plotOutput("taxonPlot"))
)
)
# define a server for the Shiny app
server <- function(input, output, session) {
# this stops the app upon closing
session$onSessionEnded(stopApp)
# fill in the spot we created for a plot
output$taxonPlot <- renderPlot({
homerange %>%
filter(taxon == input$taxon) %>%
ggplot(aes(x=log10.hra)) +
geom_density(color="black", fill="red", alpha=0.6)
})
}
shinyApp(ui, server)
#install.packages("shinydashboard")
library(shinydashboard)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_depth_mm"),
sliderInput("pointsize", "Select the Point Size", min = 0.5, max = 3, value = 1, step = 0.5),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
ggplot(penguins, aes_string(x = input$x, y = input$y, color="species")) +
geom_point(size=input$pointsize) +
theme_light()
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody()
)
server <- function(input, output) { }
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Penguins"),
dashboardSidebar(disable=T),
dashboardBody(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_depth_mm"),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Penguins"),
dashboardSidebar(disable=T),
dashboardBody(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_depth_mm"),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
ggplot(data=penguins, aes_string(x = input$x, y = input$y, color="species")) +
geom_point() +
theme_light()
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Penguins"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_depth_mm"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5)
), # close the first box
box(
plotOutput("plot", width = "500px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(penguins, aes_string(x = input$x, y = input$y, color="species")) +
geom_point(size=input$pointsize, alpha=0.8) +
theme_light(base_size = 18)
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Penguins"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_depth_mm"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5)
), # close the first box
box(title = "Plot of Penguins Data", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(penguins, aes_string(x = input$x, y = input$y, color="species")) +
geom_point(size=input$pointsize, alpha=0.8) +
theme_light(base_size = 18)
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
